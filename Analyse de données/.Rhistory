# Lecture du fichier dans le data frame 'produit'
produit <- read.csv("Data Produit.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
setwd("H:/fianarana/S9/Analyse de données/Tuto/7")
# Lecture du fichier dans le data frame 'produit'
produit <- read.csv("Data Produit.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
# Verification des modes (types) de chaque variable
str(produit)
# Effectifs des valeurs de la variables Produit
table(produit$Produit)
# Diagrammes circulaire en secteurs
pie(table(produit$Produit), main = "Repartition des classes")
pie(table(produit$Habitat), main = "Repartition de Habitat")
install.packages("ggplot2")
library(ggplot2)
# Histogrammes simples
qplot(Produit, data=produit)
qplot(Habitat, data=produit)
qplot(Enfants, data=produit)
qplot(Revenus, data=produit)
# Ajout des l?gendes sur le graphique
qplot(Habitat, data=produit, main="Distibution de Habitat", xlab="Valeur de Habitat", ylab="Nombre d'instances")
# Affichage des deux classes en couleur
qplot(Habitat, data=produit, color=Produit)
# Affichage de la couleur par le parametre fill au lieu de color
qplot(Habitat, data=produit, fill=Produit)
qplot(Enfants, data=produit, fill=Produit)
qplot(Revenus, data=produit, fill=Produit)
# Modification de la largeur des barres (taille des intervales de valeurs)
qplot(Revenus, data=produit, fill=Produit, binwidth=40000, main="Distibution de Revenus", xlab="Valeur de Revenus", ylab="Nombre d'instances")
qplot(Revenus, data=produit, fill=Produit, bins=15, main="Distibution de Revenus", xlab="Valeur de Revenus", ylab="Nombre d'instances")
# Tables de contingence de variables dicrètes
table(produit$Habitat, produit$Produit)
table(produit$Enfants, produit$Produit)
table(produit$Marie, produit$Produit)
#Definition du nombre de décimales affichées
options(digits=2)
# Tables de contingences en proportions et pourcentage de Habitat
prop.table(table(produit$Habitat, produit$Produit, dnn=c("Habitat", "Produit")))
prop.table(table(produit$Habitat, produit$Produit, dnn=c("Habitat", "Produit")))*100
# Tables de contingences en proportions et pourcentage de Enfants
prop.table(table(produit$Enfants, produit$Produit, dnn=c("Enfants", "Produit")))
prop.table(table(produit$Enfants, produit$Produit, dnn=c("Enfants", "Produit")))*100
# Tables de contingences en proportions et pourcentage de Marie
prop.table(table(produit$Marie, produit$Produit, dnn=c("Marie", "Produit")))
prop.table(table(produit$Marie, produit$Produit, dnn=c("Marie", "Produit")))*100
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(regclass)
mosaic(Habitat~Produit, data=produit,color=TRUE)
library(regclass)
mosaic(Habitat~Produit, data=produit,color=TRUE)
mosaic(Enfants~Produit, data=produit,color=TRUE)
mosaic(Marie~Produit, data=produit,color=TRUE)
# Nuages de points des variables continues Age et Revenus
qplot(Age, Revenus, data=produit, main="Nuage de point de Revenus et Age", xlab="Valeur de Age", ylab="Valeur de Revenus")
# Nuages de points des variables continues Age et Revenus
qplot(Age, Revenus, data=produit, main="Nuage de point de Revenus et Age", xlab="Valeur de Age", ylab="Valeur de Revenus")
library(ggplot2)
# Nuages de points des variables continues Age et Revenus
qplot(Age, Revenus, data=produit, main="Nuage de point de Revenus et Age", xlab="Valeur de Age", ylab="Valeur de Revenus")
# Points en couleurs selon leur classe Produit=Oui ou Produit=Non
qplot(Age, Revenus, data=produit, main="Nuage de point de Revenus et Age", xlab="Valeur de Age", ylab="Valeur de Revenus", color=Produit)
# # Nuages de points de la variable continue Revenus et la variable discrete Enfants avec la classe en couleur
qplot(Revenus, Enfants, data=produit, main="Nuage de point de Enfants et Revenus", xlab="Valeur de Revenus", ylab="Valeur de Enfants", color=Produit)
# Ajout du Jitter vertical (deplacement d'amplitude aleatoire) afin de distinguer les points
qplot(Revenus, Enfants, data=produit, main="Nuage de point de Enfants et Revenus", xlab="Valeur de Revenus", ylab="Valeur de Enfants", color=Produit) + geom_jitter(height = 0.1)
# Ajustement de l'amplitude du Jitter vertical pour mieux distinguer les points
qplot(Revenus, Enfants, data=produit, main="Nuage de point de Enfants et Revenus", xlab="Valeur de Revenus", ylab="Valeur de Enfants", color=Produit) + geom_jitter(height = 0.3)
# Duplication du data frame 'produit' en un data frame 'produit_QF'
produit_QF <- produit
# Calcul de la variable Quotient_Familial par la fonction ifelse()
produit_QF$Quotient_Familial <- ifelse(produit$Enfants==0, produit$Revenus, produit$Revenus/produit$Enfants)
# Histogramme d'effectifs de la variable Quotient_Familial
qplot(Quotient_Familial, data=produit_QF, fill=Produit, main="Distibution de Quotient_Familial", xlab="Valeur de Quotient_Familial", ylab="Nombre d'instances")
# Boxplot de de Revenus et Quotient_Familial pour chaque classe
boxplot(Revenus~Produit, data=produit_QF, notch=T, col=c("tomato","darkturquoise"), main="Revenus selon Produit", ylab="Revenus", xlab="Produit")
boxplot(Quotient_Familial~Produit, data=produit_QF, notch=T, col=c("tomato","darkturquoise"), main="Quotient_Familial selon Produit", ylab="Quotient_Familial", xlab="Produit")
# Quartiles et moyenne de la variable quantitative Quotient_Familial
summary(produit_QF$Quotient_Familial)
# Quartiles et moyenne de la variable quantitative Quotient_Familial pour chaque valeur de Produit
tapply(produit_QF$Quotient_Familial, produit_QF$Produit, summary)
# Ecriture du fichier avec Quotient_Familial
write.table(produit, "Data Produit QF.csv", sep=",", dec=".", row.names=FALSE)
# Creation des ensembles d'apprentissage et de test
produit_EA <- produit[1:400,]
produit_ET <- produit[401:600,]
produit_QF_EA <- produit_QF[1:400,]
produit_QF_ET <- produit_QF[401:600,]
# Suppression de la variable ID (identifiant) des ensembles d'apprentissage
produit_EA <- subset(produit_EA, select = -ID)
produit_QF_EA <- subset(produit_QF_EA, select = -ID)
# Installation/m-a-j et activation de la librairie C50
install.packages("C50")
library(C50)
# Apprentissage arbre sur 'produit_EA'
tree1 <- C5.0(Produit~., produit_EA)
# Apprentissage arbre sur 'produit_QF_EA'
tree2 <- C5.0(Produit~., produit_QF_EA)
# Affichages graphiques
plot(tree1, type="simple")
plot(tree2, type="simple")
# Application de 'tree1' sur l'ensemble de test produit_ET
test_tree1 <- predict(tree1, produit_ET, type="class")
# Application de 'tree2' sur l'ensemble de test produit_QF_ET
test_tree2 <- predict(tree2, produit_QF_ET, type="class")
# Taux de succes de tree1 : nombre de succes sur nombre d'exemples de test
print(nrow(produit_ET[produit_ET$Produit==test_tree1,]) / nrow(produit_ET))
# Taux de succes de tree2 : nombre de succes sur nombre d'exemples de test
print(nrow(produit_ET[produit_ET$Produit==test_tree2,]) / nrow(produit_ET))
setwd("H:/fianarana/S9/TPA/depot-architecture-projet-big-data-group-14-master/depot-architecture-projet-big-data-group-14-master/analyse")
install.packages("rJava")
install.packages("RJDBC")
install.packages("DBI")
library("rJava")
library("DBI")
library("RJDBC")
# Load driver & configuration
jdbc_chemin <- "hive-jdbc-2.1.1-standalone.jar"
hadoop_chemin <- "hadoop-common-3.3.5.jar"
drv <- JDBC(driverClass = "org.apache.hive.jdbc.HiveDriver",jdbc_chemin)
drv <- JDBC(driverClass = "org.apache.hive.jdbc.HiveDriver",hadoop_chemin)
user <- "vagrant"
password <- ""
hiveConnectionUrl <- "jdbc:hive2://localhost:10000"
# Connection to hive
conn <- dbConnect( drv, hiveConnectionUrl, user, password)
#Test Connection
dbListTables(conn)
#Retrieve data from database
client <- dbGetQuery(conn, "select * from CLIENTS_EXT")
setwd("H:/fianarana/S9/Big_data/INSTALL_MV_BIGDATA_BOX/INSTALL_MV_BIGDATA_BOX/TPA/Analyse de données")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
library("rJava")
library("DBI")
library("RJDBC")
# Load driver & configuration
jdbc_chemin <- "hive-jdbc-2.1.1-standalone.jar"
hadoop_chemin <- "hadoop-common-3.3.5.jar"
drv <- JDBC(driverClass = "org.apache.hive.jdbc.HiveDriver",jdbc_chemin)
drv <- JDBC(driverClass = "org.apache.hive.jdbc.HiveDriver",hadoop_chemin)
user <- "vagrant"
password <- ""
hiveConnectionUrl <- "jdbc:hive2://localhost:10000"
# Connection to hive
conn <- dbConnect( drv, hiveConnectionUrl, user, password)
#Test Connection
dbListTables(conn)
#Retrieve data from database
client <- dbGetQuery(conn, "select * from M2_DMA_Client_ext")
#Retrieve data from database
client <- dbGetQuery(conn, "select * from M2_DMA_Client_ext")
#Retrieve data from database
client <- dbGetQuery(conn, "select * from M2_DMA_Clients_ext")
#Retrieve data from database
client <- dbGetQuery(conn, "select * from M2_DMA_Clients_ext")
Immatriculation <- dbGetQuery(conn, "select * from M2_DMA_Immatriculation_ext")
Immatriculation <- dbGetQuery(conn, "select * from M2_DMA_Immatriculations_ext")
Immatriculation <- dbGetQuery(conn, "select * from M2_DMA_Immatriculations_ext")
# Delete table name in each column
names(client) <- gsub("clients_ext\\.", "", names(client))
table(catalogue)
catalogue <- dbGetQuery(conn, "select * from M2_DMA_Catalogue_ext")
#Retrieve data from database
client <- dbGetQuery(conn, "select * from M2_DMA_Clients_ext")
# Connection to hive
conn <- dbConnect( drv, hiveConnectionUrl, user, password)
